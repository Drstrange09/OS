#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/wait.h>

#define MAX_LINES 100
#define MAX_LENGTH 100

// Function to compare two strings for sorting

int compare(const void *a, const void *b) {

    return strcmp(*(char **)a, *(char **)b);

}

// Function to read the file and store its contents in an array of strings
int read_file(const char *filename, char lines[MAX_LINES][MAX_LENGTH]) {

    FILE *file = fopen(filename, "r");
    if (file == NULL) {
        perror("File opening failed");
        return -1;

    }

    int i = 0;
    while (fgets(lines[i], MAX_LENGTH, file) != NULL && i < MAX_LINES) {

        // Remove newline character from the end of the string
        lines[i][strcspn(lines[i], "\n")] = 0;
        I++;


    }
    fclose(file);

    // Debug print to show lines read
    printf("Read %d lines from the file:\n", i);
    for (int j = 0; j < i; j++) {

        printf("Line %d: %s\n", j + 1, lines[j]);

    }

    return i; // Return the number of lines read
}



int main() {
    char filename[100];
    char lines[MAX_LINES][MAX_LENGTH];
    int num_lines;
    int pipe_fd[2];
    pid_t pid;

    // Get the filename from the user
    printf("Enter the filename to read: ");
    scanf("%s", filename);

    // Read the file contents into the lines array
    num_lines = read_file(filename, lines);
    if (num_lines == -1) {
        exit(1);

    }

    // Create an array of pointers to the lines
    char *line_pointers[MAX_LINES];
    for (int i = 0; i < num_lines; i++) {

        line_pointers[i] = lines[i];

    }

    // Sort the lines using qsort and the compare function
    qsort(line_pointers, num_lines, sizeof(char *), compare);

   
    // Create the pipe
    if (pipe(pipe_fd) == -1) {

        perror("Pipe creation failed");
        exit(1);

    }

    // Fork to create a child process
    pid = fork();

    if (pid < 0) {
        perror("Fork failed");
        exit(1);
    }

    if (pid > 0) {
        // Parent process
        close(pipe_fd[0]); // Close the read end of the pipe

        // Write the sorted unique lines to the pipe
        for (int i = 0; i < num_lines; i++) {
            if (i == 0 || strcmp(line_pointers[i], line_pointers[i - 1]) != 0) { // Skip duplicates
                printf("Parent: Writing sorted unique line %d: %s\n", i, line_pointers[i]);  // Debug print
                write(pipe_fd[1], line_pointers[i], strlen(line_pointers[i]) + 1);
            }
        }
        close(pipe_fd[1]); // Close the write end after writing
        wait(NULL); // Wait for the child to finish
    } else {
        // Child process
        close(pipe_fd[1]); // Close the write end of the pipe

        // Open the output file to redirect the output
        int output_fd = open("output.txt", O_WRONLY | O_CREAT | O_TRUNC, 0644);
        if (output_fd == -1) {
            perror("File open failed");
            exit(1);
        }

        // Redirect stdout to the file using dup2
        if (dup2(output_fd, STDOUT_FILENO) == -1) {
            perror("dup2 failed");
            exit(1);
        }

        // Confirm redirection
        printf("Child: This should go to the output file\n");

        // Read the sorted unique lines from the pipe and write them to the file
        char buffer[MAX_LENGTH];
        int bytes_read;
        while ((bytes_read = read(pipe_fd[0], buffer, MAX_LENGTH)) > 0) {

            buffer[bytes_read] = '\0';  // Null-terminate the string
            printf("Child: Read from pipe: %s\n", buffer);  // Debug print

        }

        close(pipe_fd[0]); // Close the read end after reading

        close(output_fd);   // Close the output file descriptor
        exit(0);


    }

    return 0;
}
